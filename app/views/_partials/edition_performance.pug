//-
  script(src="https://www.paypal.com/sdk/js?client-id="+config.accounts.paypal_client_id+"&currency=EUR")
article#container(itemprop='performer', itemscope='', itemtype='http://schema.org/CreativeWork')
  //header.post_title.mb-4
    h1(itemprop="name")=page_data.title
  .row.performance-dett
    .col-xl-9
      .row
        .col-xl-3
          picture
            source(media="(max-width: 400px)" srcset=result.avnode.performance.imageFormats.small)
            source(media="(min-width: 401px)" srcset=result.avnode.performance.imageFormats.large)
            img.img-fluid(itemprop='image', alt=result.avnode.performance.title+' MAIN IMAGE', src=result.avnode.performance.imageFormats.small)
        .col-xl-9
          h1.mt-3.mt-xl-0.entry-title(itemprop='name')=result.avnode.performance.title
          .rientro
            - if (config.siae_on_off=="on") result.avnode.performance.type.name = result.avnode.performance.type.name.replace(new RegExp("DJ Set", "g"), "Live Set")
            p.type=result.avnode.performance.type.name
            p.stit
              if result.avnode.performance.duration > 0
                !="Duration: "+result.avnode.performance.humanDuration
              each booking,index in result.avnode.performance.bookings
                p.stit
                  each schedule,index2 in booking.schedule
                    .stit(class="schedule-"+schedule.venue.room.replace(RegExp(" ", 'g'), "-"))
                      !=schedule.boxDateFull
                      span.d-none(itemprop='datePublished')=schedule.starttime
                      !=" | "
                      span(itemprop='contentLocation')=schedule.venue.room
                    //-.stit
                      if schedule.price && !schedule.alleventschedulewithoneprice
                        p.price="Price: "
                          a.btn.btn-lg.btn-warning(href='https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id='+schedule.paypal, target='_blank')
                            b=schedule.price+",00 € | "+ global.__('BUY NOW')
                    
                    if booking.schedule.length && schedule.paypal && new Date(schedule.endtime)>=new Date() && (schedule.alleventschedulewithoneprice && index2==booking.schedule.length-1 || !schedule.alleventschedulewithoneprice)
                      !="eccomi"
                      .row
                        .col(class=(schedule.alleventschedulewithoneprice && index2==booking.schedule.length-1) ? "mt-3" : null)
                          p
                            if schedule.price
                              !="Price: <b>"+schedule.price+",00 €</b>"
                              if schedule.alleventschedulewithoneprice
                                !=" | <b>"+global.__('PRICE INCLUDES ALL APPOINTMENTS')+"</b>"
                              if schedule.priceincludesothershows
                                !=" | <b>"+global.__('PRICE IS FOR THE FULL DAY')+"</b>"
                            else
                              !="<b>"+global.__('Free admission with reservations required')+"</b>"
                        .col
                          if schedule.paypal=="soldout"
                            .caption-soldout
                              !=global.__('SOLD OUT')
                          if schedule.paypal && schedule.paypal!="soldout" && new Date(schedule.endtime)>=new Date()
                            a.btn.btn-lg.btn-primary(href=schedule.paypal target="_blank")
                              if schedule.price && config.prefix=="visualsound"
                                b!="<s>"+schedule.price+",00</s> € | "+ global.__('FREE WITH SCHOLARSHIP')
                              else if schedule.price
                                b=schedule.price+",00 € | "+ global.__('BUY NOW')
                              else
                                b=global.__('BOOK NOW')
                      //-else
                        p(id='paybutton')
                        script.
                          paypal.Buttons({
                            style: {
                                layout: 'horizontal'
                            },
                            createOrder: function(data, actions) {
                              var description = "#{booking.event.title}: #{result.avnode.performance.title}";
                              description = description.substring(0, 127);
                              var order = {
                                "intent": "CAPTURE",
                                "application_context": {
                                  "brand_name": "#{booking.event.title}: #{result.avnode.performance.title}",
                                  "shipping_preference": "NO_SHIPPING"
                                },

                                "purchase_units": [
                                  {
                                    "reference_id": "#{booking.event._id}_#{result.avnode.performance._id}",
                                    "description": description,
                                    "amount": {
                                      "currency": "EURO",
                                      "value": "#{booking.schedule[0].price}"
                                    }
                                  }
                                ]
                              };
                              console.log("order.create");
                              console.log(order);
                              return actions.order.create(order);
                            },
                            onApprove: function(data, actions) {
                              console.log("onApprove actions");
                              console.log(actions);
                              return actions.order.capture().then(function(details) {
                                console.log("onApprove details");
                                console.log(details);
                                alert('Transaction completed by ' + details.payer.name.given_name);
                                return fetch('https://avnode.net/api/transactionupdate', {
                                  method: 'post',
                                  headers: {
                                    'Content-Type': 'application/json'
                                  },
                                  body: JSON.stringify({
                                    orderID: data.orderID,
                                    event: "#{result.avnode._id}",
                                    item: !{JSON.stringify(result.avnode.performance)},
                                    details: details,
                                    data: data
                                  })
                                });
                              });
                            }
                          }).render('#paybutton');


                  //-.row
                    .col
                      p!="Price for LPM performing artists: <b>"+(parseFloat(booking.schedule[0].price)-(parseFloat(booking.schedule[0].price)*0.2))+",00 €</b>"
                    .col
                      if booking.schedule[0].paypal.indexOf("https")!==-1
                        a.btn.btn-lg.btn-primary(href=booking.schedule[0].paypal target="_blank")
                          b=(parseFloat(booking.schedule[0].price)-(parseFloat(booking.schedule[0].price)*0.2))+",00 € | "+ global.__('BUY NOW')
                      else
                        p(id='paybutton_discount')
                        script.
                          paypal.Buttons({
                            style: {
                                layout: 'horizontal'
                            },
                            createOrder: function(data, actions) {
                              var description = "#{booking.event.title} FOR ARTISTS: #{result.avnode.performance.title}";
                              description = description.substring(0, 127);
                              var order = {
                                "intent": "CAPTURE",
                                "application_context": {
                                  "brand_name": "#{booking.event.title}: #{result.avnode.performance.title}",
                                  "shipping_preference": "NO_SHIPPING"
                                },

                                "purchase_units": [
                                  {
                                    "reference_id": "#{booking.event._id}_#{result.avnode.performance._id}",
                                    "description": description,
                                    "amount": {
                                      "currency": "EURO",
                                      "value": "#{(parseFloat(booking.schedule[0].price)-(parseFloat(booking.schedule[0].price)*0.2))}"
                                    }
                                  }
                                ]
                              };
                              console.log("order.create");
                              console.log(order);
                              return actions.order.create(order);
                            },
                            onApprove: function(data, actions) {
                              console.log("onApprove actions");
                              console.log(actions);
                              return actions.order.capture().then(function(details) {
                                console.log("onApprove details");
                                console.log(details);
                                alert('Transaction completed by ' + details.payer.name.given_name);
                                return fetch('https://avnode.net/api/transactionupdate', {
                                  method: 'post',
                                  headers: {
                                    'Content-Type': 'application/json'
                                  },
                                  body: JSON.stringify({
                                    orderID: data.orderID,
                                    event: "#{result.avnode._id}",
                                    item: !{JSON.stringify(result.avnode.performance)},
                                    details: details,
                                    data: data
                                  })
                                });
                              });
                            }
                          }).render('#paybutton_discount');




            div(itemprop='description')!=result.avnode.performance.about

          if result.avnode.performance.galleries && result.avnode.performance.galleries.length
            .mt-3(itemprop='exampleOfWork', itemscope='', itemtype='http://schema.org/ItemList')
              h3.grid-title.h1like(itemprop='name')=global.__("Gallery")
              .rientro
                ul.listItems.row(itemscope itemtype="http://schema.org/ItemList")
                  each gallery, index in result.avnode.performance.galleries
                    li.col-xl-4.col-sm-6.itemListElement(style='margin-bottom: 30px;', itemprop='itemListElement', itemscope='', itemtype='http://schema.org/ListItem')
                      meta(itemprop='position', content=index)
                      div(itemprop='item', itemscope='', itemtype='http://schema.org/CreativeWork')
                        a.gallerythumbnail(itemprop='url', href=lang_preurl+(config.prefix=="shockart" ? "/exhibitions/" : "/editions/")+page_data.edition+'/gallery/'+gallery.slug+'/', title=gallery.title)
                          img.img-fluid(itemprop='image', src=gallery.imageFormats.small, alt=gallery.title)
                        .caption(style='padding-right:15px;padding-left:15px;')
                          .caption-body
                            h2.caption-title(itemprop='name')=gallery.title
                            //!="Images: "+gallery.stats.img
          if result.avnode.performance.videos && result.avnode.performance.videos.length
            .mt-3(itemprop='exampleOfWork', itemscope='', itemtype='http://schema.org/ItemList')
              h3.grid-title.h1like(itemprop='name')=global.__("Videos")
              .rientro
                ul.listItems.row
                  each video, index in result.avnode.performance.videos
                    li.col-xl-4.col-sm-6.itemListElement(style='margin-bottom: 30px;', itemprop='itemListElement', itemscope='', itemtype='http://schema.org/ListItem')
                      meta(itemprop='position', content=index)
                      div(itemprop='item', itemscope='', itemtype='http://schema.org/CreativeWork')
                        a.videothumbnail(itemprop='url', data-src=JSON.stringify(video), href=lang_preurl+(config.prefix=="shockart" ? "/exhibitions/" : "/editions/")+page_data.edition+'/videos/'+video.slug+'/', title=video.title)
                          img.img-fluid(itemprop='image', src=video.imageFormats.small, alt=video.title)
                        .caption(style='padding-right:15px;padding-left:15px;')
                          .caption-body
                            h2.caption-title(itemprop='name')=video.title
    .col-xl-3
      h2.mt-3.mt-xl-0.grid-title=global.__("Author")
      .rientro
        ul.lists(itemprop='author', itemscope='', itemtype='http://schema.org/ItemList')
          each user, index in result.avnode.performance.users
            li.itemListElement(itemprop='itemListElement', itemscope='', itemtype='http://schema.org/ListItem')
              meta(itemprop='position', content=index+1)
              div(itemprop='item', itemscope='', itemtype='http://schema.org/Person')
                .media.media-author
                  a.mr-3(itemprop='url', href=lang_preurl+(config.prefix=="shockart" ? "/exhibitions/" : "/editions/")+page_data.edition+"/artists/"+user.slug, title=user.stagename)
                    img.media-object(itemprop='image', src=user.imageFormats.small, alt=user.stagename)
                  .media-body
                    h2.media-heading(itemprop='name')
                      a(href=lang_preurl+(config.prefix=="shockart" ? "/exhibitions/" : "/editions/")+page_data.edition+"/artists/"+user.slug, title=user.stagename)=user.stagename
                    p.stit
                      span.stit!=user.addressesFormatted
                      if user.addresses
                        .d-none
                          each address in user.addresses
                            if address && address.country
                              span(itemprop='workLocation', itemscope='', itemtype='http://schema.org/Place')
                                span(itemprop='address', itemscope='', itemtype='http://schema.org/PostalAddress')
                                  b(itemprop='addressCountry')=address.country
                                  !=", "
                                  span(itemprop='addressLocality')=address.locality
              .mt-3.mb-3(itemprop='description')!=user.about
              if user.web && user.web.length && user.web[0].web
                p
                  strong=global.__("LINKS")
                ul.squared10aa
                  each web in user.web
                    li
                      a(target='_blank', href=web.url)=web.url
              if user.social && user.social.length && user.social[0].web
                p
                  strong=global.__("Socials")
                ul.squared10aa
                  each web in user.social
                    li
                      a(target='_blank', href=web.url)=web.url
